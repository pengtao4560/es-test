
openFeign
满足面向接口编程的思想

底层是 restTemplate 和 ribbon
服务调用和负载均衡

https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign
Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。
它的使用方法是定义一个服务接口然后在上面添加注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，、
使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡

由于 openFeign jar包 自己带着 ribbon, 所以设置超时时间底层就是 设置ribbon的超时时间，在yml文件中：

#设置feign客户端超时时间(OpenFeign默认支持ribbon)
ribbon:
#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间
  ReadTimeout: 5000
#指的是建立连接后从服务器读取到可用资源所用的时间
  ConnectTimeout: 5000


Hystrix: 已停更，但其思想设计理念非常优秀， sentinel替代 Hystrix

复杂分布式体系结构中的应用程序可能有数十个依赖关系，
每个依赖关系在某些时候将不可避免地失败。
多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，
微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”
需要一种兜底的方案，链路中断的方案

--
Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，
Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。
“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），
向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，
 这样就保证了
 服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。

什么是 服务降级、服务熔断、服务限流
服务降级 fallback : 假设对方系统不可用了，给返回一个兜底的解决办法 友好的提示： 服务器忙，请稍后再试，不让客户等待并立刻返回一个友好提示
哪些情况会降级： 程序运行异常，超时，服务熔断触发服务降级，线程池/信号量打满也会导致服务降级
服务熔断 break: 就是保险丝，跳闸限电。 达到最大访问量后，调用服务降级的方法并返回友好提示。 服务的降级->进而熔断->恢复调用链路
服务限流 flowlimit ：秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行
